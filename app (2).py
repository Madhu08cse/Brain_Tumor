# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-u-50i5Y_XJGA6dDNH4DacIKQ4LDLQC_
"""

#pip install streamlit reportlab pillow gdown

import streamlit as st
from PIL import Image
import os
import numpy as np
import datetime
import gdown
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader

# ------------------------------
# Setup folders
# ------------------------------
os.makedirs("uploads", exist_ok=True)
MODEL_PATH = "BrainTumor.h5"

# ------------------------------
# Download model from Google Drive
# ------------------------------
if not os.path.exists(MODEL_PATH):
    with st.spinner("📥 Downloading model from Google Drive..."):
        try:
            gdown.download(
                "https://drive.google.com/uc?id=1kLZNlIa34pQ_ekedmN5UjXRpJD69F2lm",
                MODEL_PATH,
                quiet=False
            )
        except Exception as e:
            st.error(f"❌ Failed to download model: {e}")

# ------------------------------
# Check file size (for debugging)
# ------------------------------
if os.path.exists(MODEL_PATH):
    size_mb = round(os.path.getsize(MODEL_PATH) / (1024 * 1024), 2)
    st.info(f"📦 Model file size: {size_mb} MB")
else:
    st.error("❌ Model file not found.")

# ------------------------------
# Load model with error handling
# ------------------------------
try:
    model = load_model(MODEL_PATH)
    st.success("✅ Brain Tumor Model Loaded Successfully")
except Exception as e:
    model = None
    st.error(f"❌ Error loading model: {e}")

# ------------------------------
# PDF Report Generator
# ------------------------------
def generate_pdf(patient_name, patient_img_path, mri_img_path, diagnosis_result, pdf_path):
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4

    c.setFont("Helvetica-Bold", 20)
    c.drawCentredString(width / 2.0, height - 50, "Brain Tumor Detection Report")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 80, f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 110, f"Patient Name: {patient_name}")

    c.drawString(50, height - 140, "Patient Image:")
    c.drawImage(ImageReader(patient_img_path), 50, height - 340, width=150, height=150)

    c.drawString(300, height - 140, "Brain MRI Image:")
    c.drawImage(ImageReader(mri_img_path), 300, height - 340, width=150, height=150)

    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 370, "Diagnosis Report:")
    text = c.beginText(50, height - 390)
    text.setFont("Helvetica", 11)
    text.setLeading(15)
    for line in diagnosis_result.strip().split('\n'):
        text.textLine(line.strip())
    c.drawText(text)
    c.save()

# ------------------------------
# Streamlit UI
# ------------------------------
st.title("🧠 Brain Tumor Detection Report Generator")

with st.form("report_form"):
    patient_name = st.text_input("Patient Name")
    patient_email = st.text_input("Patient Email")
    patient_image = st.file_uploader("Upload Patient Photo", type=["jpg", "jpeg", "png"])
    mri_image = st.file_uploader("Upload Brain MRI Image", type=["jpg", "jpeg", "png"])
    submit = st.form_submit_button("Generate Report")

# ------------------------------
# On form submission
# ------------------------------
if submit and patient_image and mri_image and model:
    # Save uploaded images
    patient_img_path = os.path.join("uploads", patient_image.name)
    mri_img_path = os.path.join("uploads", mri_image.name)

    with open(patient_img_path, "wb") as f:
        f.write(patient_image.read())
    with open(mri_img_path, "wb") as f:
        f.write(mri_image.read())

    # Preprocess and Predict
    img = image.load_img(mri_img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    prediction = model.predict(img_array)[0][0]

    # Diagnosis Result
    if prediction >= 0.5:
        diagnosis_result = (
            "Tumor Detected\n\n"
            "🧑‍⚕️ Consultation Recommended:\n"
            "- Visit a neurologist or oncologist\n"
            "- Schedule MRI/CT scan follow-up\n"
            "- Monitor symptoms (headaches, seizures, etc.)\n"
            "\n⚠️ This is a preliminary AI result. Please consult a doctor."
        )
    else:
        diagnosis_result = (
            "No Tumor Detected\n\n"
            "🧠 Brain Health Maintenance Guide:\n"
            "- Eat a healthy diet\n"
            "- Exercise regularly\n"
            "- Sleep well and reduce stress\n"
            "- Get regular checkups\n"
            "\n✅ This is a positive result, but always stay health-conscious."
        )

    # Generate PDF
    pdf_path = os.path.join("uploads", f"{patient_name.replace(' ', '_')}_report.pdf")
    generate_pdf(patient_name, patient_img_path, mri_img_path, diagnosis_result, pdf_path)

    st.success("✅ PDF report generated successfully!")
    with open(pdf_path, "rb") as f:
        st.download_button("📄 Download Report", f, file_name=os.path.basename(pdf_path))

    col1, col2 = st.columns(2)
    with col1:
        st.image(patient_img_path, caption="Patient Photo", use_column_width=True)
    with col2:
        st.image(mri_img_path, caption="MRI Scan", use_column_width=True)

elif submit and model is None:
    st.error("❌ Model is not loaded. Cannot perform prediction.")